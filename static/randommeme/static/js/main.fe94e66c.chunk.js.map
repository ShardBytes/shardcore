{"version":3,"sources":["MemeDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","fetch","then","res","json","result","setState","catch","error","console","log","react_default","a","createElement","className","title","subreddit","author","alt","src","image","React","Component","Container","MemeDisplay_default","Boolean","window","location","hostname","match","ReactDOM","render","App_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAsBE,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACxBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,MAHgBR,mFAON,IAAAS,EAAAN,KAClBO,MA5BQ,yCA6BLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJL,EAAKM,SAAS,CAAEP,KAAMM,MAEvBE,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAGvB,IACCT,EAASL,KAAKI,MAAdC,KACR,OAAIA,EACKY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UAAKd,EAAKgB,OACVJ,EAAAC,EAAAC,cAAA,eAAOd,EAAKiB,WACZL,EAAAC,EAAAC,cAAA,oBAAYd,EAAKkB,QACjBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQI,IAAI,OAAOC,IAAKpB,EAAKqB,UAIzCT,EAAAC,EAAAC,cAAA,+BA9BgBQ,IAAMC,sMCN/B,OAAOX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACLZ,EAAAC,EAAAC,cAACW,EAAD,cAHuBH,IAAMC,WCAfG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.fe94e66c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst url = \"https://api.memeload.us/v1/random.php\"\r\n\r\ninterface Meme {\r\n  id: string\r\n  title: string\r\n  subreddit: string\r\n  author: string\r\n  image: string\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n    data: Meme | null\r\n}\r\n\r\nexport default class extends React.Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n    this.state = {\r\n      data: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({ data: result as Meme })\r\n      })\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state\r\n    if (data) {\r\n      return <div className=\"text-center\">\r\n        <div className=\"align-center\">\r\n          <h1>{data.title}</h1>\r\n          <p>/r/{data.subreddit}</p>\r\n          <p>Author: {data.author}</p>\r\n          <img className=\"w-100\" alt=\"meme\" src={data.image} />\r\n        </div>\r\n      </div>\r\n    } else {\r\n      return <h1>Loading...</h1>\r\n    }\r\n  }\r\n}","import React from 'react'\nimport MemeDisplay from './MemeDisplay';\nimport { Container } from 'reactstrap';\n\ninterface Props {\n\n}\n\ninterface State {\n\n}\n\nexport default class extends React.Component<Props, State> {\n  render() {\n    return <Container>\n      <MemeDisplay />\n    </Container>\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/js/bootstrap.bundle'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}